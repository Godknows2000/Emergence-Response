// <auto-generated />
using System;
using EmergenceResponse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmergenceResponse.Data.Migrations
{
    [DbContext(typeof(EmergenceContext))]
    [Migration("20250425094051_voice-note-report")]
    partial class voicenotereport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmergenceResponse.Data.Emergency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("AudioData")
                        .HasColumnType("bytea");

                    b.Property<string>("AudioMimeType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Emergency_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Emergency", (string)null);
                });

            modelBuilder.Entity("EmergenceResponse.Data.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("Location_pkey");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("EmergenceResponse.Data.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id")
                        .HasName("Member_pkey");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("EmergenceResponse.Data.ServiceProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("ServiceProvider_pkey");

                    b.HasIndex("LocationId");

                    b.ToTable("ServiceProvider", (string)null);
                });

            modelBuilder.Entity("EmergenceResponse.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthRecoveryCodes")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("AuthenticatorKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMobileConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockoutExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mobile")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PreferredEmail")
                        .HasColumnType("text");

                    b.Property<int?>("RightsId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ServiceProviderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorAuthEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.HasIndex("MemberId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EmergenceResponse.Data.Emergency", b =>
                {
                    b.HasOne("EmergenceResponse.Data.Member", "Creator")
                        .WithMany("Emergencies")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("CreatorId_fk");

                    b.HasOne("EmergenceResponse.Data.Location", "Location")
                        .WithMany("Emergencies")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("LocationId_fk");

                    b.HasOne("EmergenceResponse.Data.ServiceProvider", "ServiceProvider")
                        .WithMany("Emergencies")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("ServiceProviderId_fk");

                    b.Navigation("Creator");

                    b.Navigation("Location");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("EmergenceResponse.Data.ServiceProvider", b =>
                {
                    b.HasOne("EmergenceResponse.Data.Location", "Location")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("LocationId_fk");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EmergenceResponse.Data.User", b =>
                {
                    b.HasOne("EmergenceResponse.Data.Member", "Member")
                        .WithMany("Users")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("MemberId");

                    b.HasOne("EmergenceResponse.Data.ServiceProvider", "ServiceProvider")
                        .WithMany("Users")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("ServiceProviderId");

                    b.Navigation("Member");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("EmergenceResponse.Data.Location", b =>
                {
                    b.Navigation("Emergencies");

                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("EmergenceResponse.Data.Member", b =>
                {
                    b.Navigation("Emergencies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EmergenceResponse.Data.ServiceProvider", b =>
                {
                    b.Navigation("Emergencies");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
